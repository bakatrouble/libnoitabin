#include <noita/components/WorldStateComponent.h>

void noita::components::WorldStateComponent::parse(binary_io::any_istream &in, noita::components::WorldStateComponent &out) {
    priv::read_integral(in, out.is_initialized);
    priv::read_integral(in, out.time);
    priv::read_integral(in, out.time_total);
    priv::read_integral(in, out.time_dt);
    priv::read_integral(in, out.day_count);
    priv::read_integral(in, out.rain);
    priv::read_integral(in, out.rain_target);
    priv::read_integral(in, out.fog);
    priv::read_integral(in, out.fog_target);
    priv::read_integral(in, out.intro_weather);
    priv::read_integral(in, out.wind);
    priv::read_integral(in, out.wind_speed);
    priv::read_integral(in, out.wind_speed_sin_t);
    priv::read_integral(in, out.wind_speed_sin);
    priv::read_integral(in, out.clouds_01_target);
    priv::read_integral(in, out.clouds_02_target);
    priv::read_integral(in, out.gradient_sky_alpha_target);
    priv::read_integral(in, out.sky_sunset_alpha_target);
    priv::read_integral(in, out.lightning_count);
    types::vec2<float>::parse(in, out.player_spawn_location);
    priv::read_integral_map(in, out.lua_globals);
    priv::read_custom_vector(in, out.pending_portals);
    priv::read_integral(in, out.next_portal_id);
    priv::read_integral_vector(in, out.apparitions_per_level);
    priv::read_custom_vector(in, out.npc_parties);
    priv::read_integral(in, out.session_stat_file);
    priv::read_integral_vector(in, out.orbs_found_thisrun);
    priv::read_integral_vector(in, out.flags);
    priv::read_integral_vector(in, out.changed_materials);
    priv::read_integral(in, out.player_polymorph_count);
    priv::read_integral(in, out.player_polymorph_random_count);
    priv::read_integral(in, out.player_did_infinite_spell_count);
    priv::read_integral(in, out.player_did_damage_over_1milj);
    priv::read_integral(in, out.player_living_with_minus_hp);
    priv::read_integral(in, out.global_genome_relations_modifier);
    priv::read_integral(in, out.mods_have_been_active_during_this_run);
    priv::read_integral(in, out.twitch_has_been_active_during_this_run);
    priv::read_integral(in, out.next_cut_through_world_id);
    priv::read_custom_vector(in, out.cuts_through_world);
    types::LensValue<int32_t>::parse(in, out.gore_multiplier);
    types::LensValue<int32_t>::parse(in, out.trick_kill_gold_multiplier);
    types::LensValue<float>::parse(in, out.damage_flash_multiplier);
    types::LensValue<bool>::parse(in, out.open_fog_of_war_everywhere);
    types::LensValue<bool>::parse(in, out.consume_actions);
    priv::read_integral(in, out.perk_infinite_spells);
    priv::read_integral(in, out.perk_trick_kills_blood_money);
    priv::read_integral(in, out.perk_hp_drop_chance);
    priv::read_integral(in, out.perk_gold_is_forever);
    priv::read_integral(in, out.perk_rats_player_friendly);
    priv::read_integral(in, out.EVERYTHING_TO_GOLD);
    priv::read_integral(in, out.material_everything_to_gold);
    priv::read_integral(in, out.material_everything_to_gold_static);
    priv::read_integral(in, out.INFINITE_GOLD_HAPPENING);
    priv::read_integral(in, out.ENDING_HAPPINESS_HAPPENING);
    priv::read_integral(in, out.ENDING_HAPPINESS_FRAMES);
    priv::read_integral(in, out.ENDING_HAPPINESS);
    priv::read_integral(in, out.mFlashAlpha);
    priv::read_integral(in, out.DEBUG_LOADED_FROM_AUTOSAVE);
    priv::read_integral(in, out.DEBUG_LOADED_FROM_OLD_VERSION);
}
