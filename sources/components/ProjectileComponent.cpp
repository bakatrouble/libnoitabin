#include <noita/components/ProjectileComponent.h>

void noita::components::ProjectileComponent::parse(binary_io::any_istream &in, noita::components::ProjectileComponent &out) {
    priv::read_integral(in, out.projectile_type);
    priv::read_integral(in, out.lifetime);
    priv::read_integral(in, out.lifetime_randomness);
    priv::read_integral(in, out.on_lifetime_out_explode);
    priv::read_integral(in, out.collide_with_world);
    types::ConfigGunActionInfo::parse(in, out.config);
    priv::read_integral(in, out.speed_min);
    priv::read_integral(in, out.speed_max);
    priv::read_integral(in, out.friction);
    priv::read_integral(in, out.direction_random_rad);
    priv::read_integral(in, out.direction_nonrandom_rad);
    priv::read_integral(in, out.lob_min);
    priv::read_integral(in, out.lob_max);
    priv::read_integral(in, out.camera_shake_when_shot);
    priv::read_integral(in, out.shoot_light_flash_radius);
    priv::read_integral(in, out.shoot_light_flash_r);
    priv::read_integral(in, out.shoot_light_flash_g);
    priv::read_integral(in, out.shoot_light_flash_b);
    priv::read_integral(in, out.create_shell_casing);
    priv::read_integral(in, out.shell_casing_material);
    types::vec2<float>::parse(in, out.shell_casing_offset);
    priv::read_integral(in, out.muzzle_flash_file);
    priv::read_integral(in, out.bounces_left);
    priv::read_integral(in, out.bounce_energy);
    priv::read_integral(in, out.bounce_always);
    priv::read_integral(in, out.bounce_at_any_angle);
    priv::read_integral(in, out.attach_to_parent_trigger);
    priv::read_integral(in, out.bounce_fx_file);
    priv::read_integral(in, out.angular_velocity);
    priv::read_integral(in, out.velocity_sets_rotation);
    priv::read_integral(in, out.velocity_sets_scale);
    priv::read_integral(in, out.velocity_sets_scale_coeff);
    priv::read_integral(in, out.velocity_sets_y_flip);
    priv::read_integral(in, out.velocity_updates_animation);
    priv::read_integral(in, out.ground_penetration_coeff);
    priv::read_integral(in, out.ground_penetration_max_durability_to_destroy);
    priv::read_integral(in, out.go_through_this_material);
    priv::read_integral(in, out.do_moveto_update);
    priv::read_integral(in, out.on_death_duplicate_remaining);
    priv::read_integral(in, out.on_death_gfx_leave_sprite);
    priv::read_integral(in, out.on_death_explode);
    priv::read_integral(in, out.on_death_emit_particle);
    priv::read_integral(in, out.on_death_emit_particle_count);
    priv::read_integral(in, out.die_on_liquid_collision);
    priv::read_integral(in, out.die_on_low_velocity);
    priv::read_integral(in, out.die_on_low_velocity_limit);
    priv::read_integral(in, out.on_death_emit_particle_type);
    priv::read_integral(in, out.on_death_particle_check_concrete);
    priv::read_integral(in, out.ground_collision_fx);
    priv::read_integral(in, out.explosion_dont_damage_shooter);
    types::ConfigExplosion::parse(in, out.config_explosion);
    priv::read_integral(in, out.on_death_item_pickable_radius);
    priv::read_integral(in, out.penetrate_world);
    priv::read_integral(in, out.penetrate_world_velocity_coeff);
    priv::read_integral(in, out.penetrate_entities);
    priv::read_integral(in, out.on_collision_die);
    priv::read_integral(in, out.on_collision_remove_projectile);
    priv::read_integral(in, out.on_collision_spawn_entity);
    priv::read_integral(in, out.spawn_entity);
    priv::read_integral(in, out.spawn_entity_is_projectile);
    priv::read_integral(in, out.physics_impulse_coeff);
    priv::read_integral(in, out.damage_every_x_frames);
    priv::read_integral(in, out.damage_scaled_by_speed);
    priv::read_integral(in, out.damage_scale_max_speed);
    priv::read_integral(in, out.ragdoll_fx_on_collision);
    priv::read_integral(in, out.collide_with_entities);
    priv::read_integral(in, out.collide_with_tag);
    priv::read_integral(in, out.dont_collide_with_tag);
    priv::read_integral(in, out.collide_with_shooter_frames);
    priv::read_integral(in, out.friendly_fire);
    priv::read_integral(in, out.damage);
    types::ConfigDamagesByType::parse(in, out.damage_by_type);
    types::ConfigDamageCritical::parse(in, out.damage_critical);
    priv::read_integral(in, out.knockback_force);
    priv::read_integral(in, out.ragdoll_force_multiplier);
    priv::read_integral(in, out.hit_particle_force_multiplier);
    priv::read_integral(in, out.blood_count_multiplier);
    priv::read_integral(in, out.damage_game_effect_entities);
    priv::read_integral(in, out.never_hit_player);
    priv::read_integral(in, out.collect_materials_to_shooter);
    priv::read_integral(in, out.play_damage_sounds);
    priv::read_integral(in, out.mLastFrameDamaged);
}
