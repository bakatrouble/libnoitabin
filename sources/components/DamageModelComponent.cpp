#include <noita/components/DamageModelComponent.h>

void noita::components::DamageModelComponent::parse(binary_io::any_istream &in, noita::components::DamageModelComponent &out) {
    priv::read_integral(in, out.hp);
    priv::read_integral(in, out.max_hp);
    priv::read_integral(in, out.max_hp_cap);
    priv::read_integral(in, out.max_hp_old);
    types::ConfigDamagesByType::parse(in, out.damage_multipliers);
    priv::read_integral(in, out.critical_damage_resistance);
    priv::read_integral(in, out.invincibility_frames);
    priv::read_integral(in, out.falling_damages);
    priv::read_integral(in, out.falling_damage_height_min);
    priv::read_integral(in, out.falling_damage_height_max);
    priv::read_integral(in, out.falling_damage_damage_min);
    priv::read_integral(in, out.falling_damage_damage_max);
    priv::read_integral(in, out.air_needed);
    priv::read_integral(in, out.air_in_lungs);
    priv::read_integral(in, out.air_in_lungs_max);
    priv::read_integral(in, out.air_lack_of_damage);
    priv::read_integral(in, out.minimum_knockback_force);
    priv::read_integral(in, out.materials_damage);
    priv::read_integral(in, out.material_damage_min_cell_count);
    priv::read_integral(in, out.materials_that_damage);
    priv::read_integral(in, out.materials_how_much_damage);
    priv::read_integral(in, out.materials_damage_proportional_to_maxhp);
    priv::read_integral(in, out.physics_objects_damage);
    priv::read_integral(in, out.materials_create_messages);
    priv::read_integral(in, out.materials_that_create_messages);
    priv::read_integral(in, out.ragdoll_filenames_file);
    priv::read_integral(in, out.ragdoll_material);
    priv::read_integral(in, out.ragdoll_offset_x);
    priv::read_integral(in, out.ragdoll_offset_y);
    priv::read_integral(in, out.ragdoll_fx_forced);
    priv::read_integral(in, out.blood_material);
    priv::read_integral(in, out.blood_spray_material);
    priv::read_integral(in, out.blood_spray_create_some_cosmetic);
    priv::read_integral(in, out.blood_multiplier);
    priv::read_integral(in, out.ragdoll_blood_amount_absolute);
    priv::read_integral(in, out.blood_sprite_directional);
    priv::read_integral(in, out.blood_sprite_large);
    priv::read_integral(in, out.healing_particle_effect_entity);
    priv::read_integral(in, out.create_ragdoll);
    priv::read_integral(in, out.ragdollify_child_entity_sprites);
    priv::read_integral(in, out.ragdollify_root_angular_damping);
    priv::read_integral(in, out.ragdollify_disintegrate_nonroot);
    priv::read_integral(in, out.wait_for_kill_flag_on_death);
    priv::read_integral(in, out.kill_now);
    priv::read_integral(in, out.drop_items_on_death);
    priv::read_integral(in, out.ui_report_damage);
    priv::read_integral(in, out.ui_force_report_damage);
    priv::read_integral(in, out.in_liquid_shooting_electrify_prob);
    priv::read_integral(in, out.wet_status_effect_damage);
    priv::read_integral(in, out.is_on_fire);
    priv::read_integral(in, out.fire_probability_of_ignition);
    priv::read_integral(in, out.fire_how_much_fire_generates);
    priv::read_integral(in, out.fire_damage_ignited_amount);
    priv::read_integral(in, out.fire_damage_amount);
    priv::read_integral(in, out.mLastElectricityResistanceFrame);
    priv::read_integral(in, out.mLastFrameReportedBlock);
    priv::read_integral(in, out.mLastMaxHpChangeFrame);
}
